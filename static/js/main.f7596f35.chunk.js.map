{"version":3,"sources":["images/pokemon1.jpg","images/pokemon2.png","images/pokemon3.png","images/pokemon4.png","images/pokemon5.png","images/pokemon6.png","images/pokemon7.png","images/pokemon8.png","images/pokemon9.png","images/pokemon10.png","images/pokemon11.png","images/pokemon12.png","components/Navbar/Navbar.js","components/Pokemon/Pokemon.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","images.js","components/ClickyGame.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","navMsgColor","navMessage","score","highScore","Pokemon","onClick","e","clickEvent","target","src","name","alt","Container","shake","map","i","components_Pokemon_Pokemon","key","Footer","Banner","images","pokemon1","pokemon2","pokemon3","pokemon4","pokemon5","pokemon6","pokemon7","pokemon8","pokemon9","pokemon10","pokemon11","pokemon12","ClickyGame","state","allPokemon","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","_this2","this","prevState","shuffled","includes","setState","setTimeout","components_Navbar_Navbar","components_Banner_Banner","components_Container_Container","components_Footer_Footer","Component","ReactDOM","render","components_ClickyGame","document","getElementById"],"mappings":"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","file":"static/js/main.f7596f35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon1.3016fb89.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pokemon2.6a0fac75.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon3.9609b27e.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon4.846e7497.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon5.11d11e03.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon6.be2a6b7b.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon7.d718608c.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon8.f7270c69.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon9.17637010.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon10.b717e985.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon11.b614a3df.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon12.2a656ea8.png\";","import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n  <div className=\"navbar \">\n    <div>React Memory Game</div>\n    <div className={props.navMsgColor}>{props.navMessage}</div>\n    <div>\n      Score: {props.score} <span className=\"pipe\">|</span> High Score:{\" \"}\n      {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Pokemon.css\";\n\n// the onClick function is defined as a callback so that the clicked elements value\n// can be passed to props.clickEvent to check if the image has been clicked or not\nconst Pokemon = props => (\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n  </div>\n);\n\nexport default Pokemon;\n","import React from 'react';\nimport './Container.css';\nimport Pokemon from '../Pokemon';\n\n// main container for each Pokemoncomponent\n// loops through each index in props.Pokemon, which contains an array of Pokemonimages\n// to create a new Pokemoncomponent for each image\n// attaches the passed down clickEvent function to each Pokemoncomponent\nconst Container = props => (\n  // loops through\n  <div\n    className={\n      props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n  >\n    {props.Pokemon.map((a, i) => <Pokemon name={a} key={i} clickEvent={props.clickEvent} />)}\n  </div>\n);\n\nexport default Container;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => <div className=\"footer text-center\">BrokeTheInternet Github: https://github.com/BrokeTheInternet</div>;\n\n// const Anchor = props => {\n//     return (\n//       <a {...props}>{ props.children }</a>\n//     );\n// }\n\nexport default Footer;\n","import React from \"react\";\nimport \"./Banner.css\";\n\nconst Banner = () => (\n  <div className=\"banner text-center d-flex align-items-center\">\n    <p className=\"m-0\">\n      Click on an image once to earn points. \n      \n      Click on image twice to lose all\n      your points! How good is your memory?\n    </p>\n  </div>\n);\n\nexport default Banner;\n","import pokemon1 from \"./images/pokemon1.jpg\";\nimport pokemon2 from \"./images/pokemon2.png\";\nimport pokemon3 from \"./images/pokemon3.png\";\nimport pokemon4 from \"./images/pokemon4.png\";\nimport pokemon5 from \"./images/pokemon5.png\";\nimport pokemon6 from \"./images/pokemon6.png\";\nimport pokemon7 from \"./images/pokemon7.png\";\nimport pokemon8 from \"./images/pokemon8.png\";\nimport pokemon9 from \"./images/pokemon9.png\";\nimport pokemon10 from \"./images/pokemon10.png\";\nimport pokemon11 from \"./images/pokemon11.png\";\nimport pokemon12 from \"./images/pokemon12.png\";\n\nconst images = [\n  pokemon1,\n  pokemon2,\n  pokemon3,\n  pokemon4,\n  pokemon5,\n  pokemon6,\n  pokemon7,\n  pokemon8,\n  pokemon9,\n  pokemon10,\n  pokemon11,\n  pokemon12\n];\n\nexport default images;\n","import React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport Banner from \"./Banner\";\nimport images from \"../images\";\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    navMsgColor: \"\",\n\n    // contains intro, success, and failure message\n    navMessage: \"Click image to begin!\",\n\n    // contains an array of image urls\n    allPokemon: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  // binds the current this context to checkClicked to have access to the current state\n  // when passed down to the Character component\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current Pokemon array to modify it by value, and not by reference\n    const newArr = images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(\n        newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]\n      );\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: \"incorrect\",\n        navMessage: \"Incorrect guess!\",\n        allPokemon: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: \"correct\",\n      navMessage: \"You Guessed Correctly!\",\n      allPokemon: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: \"\" }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized state.allPokemon array to Container to create a Character component for each image.\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Banner />\n        <Container\n          shake={state.shake}\n          Pokemon={state.allPokemon}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './components/ClickyGame';\nimport './index.css';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));\n"],"sourceRoot":""}